public class Solution {
    /**
     * @param rooms: m x n 2D grid
     * @return: nothing
     */
    public void wallsAndGates(int[][] rooms) {
        // write your code here
        if (rooms == null || rooms.length < 1) {
            return;
        }
        if (rooms[0] == null || rooms[0].length < 1) {
            return;
        }

        // find the gates
        for (int i = 0; i < rooms.length; i++) {
            for (int j = 0; j < rooms[i].length; j++) {
                if (rooms[i][j] == 0) {
                    bfs(rooms, i, j);
                }
            }
        }
    }

    private void bfs(int[][] rooms, int i, int j) {
        int[] directR = new int[]{-1, 1, 0, 0};
        int[] directC = new int[]{0, 0, -1, 1};

        Queue<Integer> queueR = new LinkedList<>();
        Queue<Integer> queueC = new LinkedList<>();
        queueR.offer(i);
        queueC.offer(j);

        while (!queueR.isEmpty() && !queueC.isEmpty()) {
            int r = queueR.poll();
            int c = queueC.poll();

            for (int k = 0; k < 4; k++) {
                int nextR = r + directR[k];
                int nextC = c + directC[k];
                if (nextR < 0 || nextR >= rooms.length) {
                    continue;
                }
                if (nextC < 0 || nextC >= rooms[0].length) {
                    continue;
                }
                if (rooms[nextR][nextC] == -1) {
                    continue;
                }
                if (rooms[nextR][nextC] < rooms[r][c] + 1) {
                    continue;
                }
                rooms[nextR][nextC] = Math.min(rooms[nextR][nextC], rooms[r][c] + 1);
                queueR.offer(nextR);
                queueC.offer(nextC);
            }
        }
    }
}