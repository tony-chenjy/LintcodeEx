public class Solution {
    /**
     * @param A: A string
     * @param B: A string
     * @return: The length of longest common subsequence of A and B
     */
    public int longestCommonSubsequence(String A, String B) {
        // write your code here
        int n = A.length();
        int m = B.length();

        int[][] dp = new int[n + 1][m + 1];
        for (int i = 1; i < dp.length; i++) {
            for (int j = 1; j < dp[i].length; j++) {
                if (A.charAt(i - 1) == B.charAt(j - 1)) {
                    int max = 0;
                    for (int r = 1; r < i; r++) {
                        for (int c = 1; c < j; c++) {
                            max = Math.max(max, dp[r][c]);
                        }
                    }
                    dp[i][j] = max + 1;
                } else {
                    dp[i][j] = 0;
                }
            }
        }

        int max = 0;
        for (int i = 1; i < dp.length; i++) {
            for (int j = 1; j < dp[i].length; j++) {
                max = Math.max(max, dp[i][j]);
            }
        }
        return max;
    }

    /**
     *   # E A C B
     * #
     * A
     * B
     * C
     * D
     *
     * if A[i - 1] == B[j - 1]
     * f(i, j) = max(1 - (i - 1), 1 - (j - 1)) + 1;
     * OR
     * f(i, j) = 0
     */
}