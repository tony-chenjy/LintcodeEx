class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        // fault tolerance judgement
        if (grid == null || grid.length < 1) {
            return -1;
        }
        if (grid[0] == null || grid[0].length < 1) {
            return -1;
        }
        if (grid[0][0] == 1) {
            return -1;
        }

        return bfs(grid);
    }

    // level order traverse
    public int bfs(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;

        int[][] direction = {{1, 0}, {-1, 0}, {0, -1}, {0, 1},
                {1, -1}, {-1, -1}, {1, 1}, {-1, 1}};

        Queue<int[]> queue = new LinkedList<>();
        boolean[][] visited = new boolean[n][m];

        queue.offer(new int[]{0, 0});
        visited[0][0] = true;

        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            step++;

            for (int j = 0; j < size; j++) {
                int[] point = queue.poll();
                if (point[0] == (n - 1) && point[1] == (m - 1)) {
                    return step;
                }

                for (int i = 0; i < 8; i++) {
                    int nRow = point[0] + direction[i][0];
                    int nCol = point[1] + direction[i][1];
                    if (isAvailable(grid, nRow, nCol) && !visited[nRow][nCol]) {
                        queue.offer(new int[]{nRow, nCol});
                        visited[nRow][nCol] = true;
                    }
                }
            }
        }
        return -1;
    }

    public boolean isAvailable(int[][] grid, int row, int col) {
        if (row < 0 || row >= grid.length) {
            return false;
        }
        if (col < 0 || col >= grid[0].length) {
            return false;
        }
        return grid[row][col] == 0;
    }
}