/**
 * 区间型动态规划，使用两维的数组来记录状态，f[i][j]表示将区间i~j合并成一堆的总开销
 */
public class Solution {
    /**
     * @param stones:
     * @param K:
     * @return: return a integer
     */
    public int mergeStones(int[] stones, int k) {
        // write your code here
        if (stones.length <= 1) {
            return 0;
        }
        if ((stones.length - 1) % (k - 1) != 0) {
            return -1;
        }

        int n = stones.length;

        int[] sum = new int[n + 1];
        sum[0] = 0;
        for (int i = 1; i <= n; i++) {
            sum[i] = sum[i - 1] + stones[i - 1];
        }

        int[][] f = new int[n][n]; //（合并下标从i~j的区间剩余1堆）的总开销
        for (int i = 0; i < n; i++) {
            f[i][i] = 0;
        }

        for (int len = 2; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                f[i][j] = Integer.MAX_VALUE;
                for (int m = i; m < j; m += (k - 1)) {
                    f[i][j] = Math.min(f[i][j], f[i][m] + f[m + 1][j]);
                }
                if ((len - k) % (k - 1) == 0) {
                    f[i][j] += sum[j + 1] - sum[i];
                }
            }
        }

        return f[0][n - 1];
    }
}