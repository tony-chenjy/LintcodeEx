class LRUCache {

    private LinkedHashMap<Integer, Integer> cache;
    private int max;

    public LRUCache(int capacity) {
        this.max = capacity;
        this.cache = new LinkedHashMap<Integer, Integer>(capacity);
    }

    public int get(int key) {
        if (!this.cache.containsKey(key)) {
            return -1;
        }
        int value = this.cache.get(key);
        this.cache.remove(key);
        this.cache.put(key, value);
        return value;
    }

    public void put(int key, int value) {
        if (!this.cache.containsKey(key)) {
            this.cache.put(key, value);
            if (this.cache.size() > max) {
                this.cache.remove(this.cache.keySet().iterator().next());
            }
        } else {
            this.cache.remove(key);
            this.cache.put(key, value);
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */