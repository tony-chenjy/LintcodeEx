class Solution {
    public List<List<Integer>> permute(int[] nums) {
        // fault tolerance judgement
        if (nums == null || nums.length < 1) {
            return null;
        }

        List<List<Integer>> resultList = new ArrayList<>();
        dfs(nums, new HashSet<Integer>(), new ArrayList<Integer>(), resultList);
        return resultList;
    }

    private void dfs(int[] nums,
                     Set<Integer> set,
                     List<Integer> list,
                     List<List<Integer>> resultList) {
        // base case
        if (list.size() == nums.length) {
            resultList.add(new ArrayList<Integer>(list));
            return;
        }

        for (int i = 0; i < nums.length; i++) {
            if (set.contains(i)) {
                continue;
            }

            list.add(nums[i]);
            set.add(i);
            dfs(nums, set, list, resultList);
            set.remove(i);
            list.remove(list.size() - 1);
        }
    }
}